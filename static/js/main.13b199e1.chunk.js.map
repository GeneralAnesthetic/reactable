{"version":3,"sources":["components/Navbar.js","components/Header.js","components/Card.js","components/CardContainer.js","App.js","registerServiceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","id","score","top","Header","Card","src","alt","onClick","handleClick","CardContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","target","exists","state","selectedPics","forEach","pic","endGame","pics","setState","toConsumableArray","concat","console","log","updateScore","shuffle","updateCurrentScore","updateTopScore","Pics","_this2","map","components_Card","photo","key","name","Component","App","newCount","count","newTop","topScore","components_Navbar","components_Header","components_CardContainer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.13b199e1.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Navbar = props => (\n  <nav className=\"navbar navbar-expand-lg navbar-dark fixed-top bg-dark\">\n    <a className=\"navbar-brand\" href=\"/\" id=\"logo\">\n      <h3>Drunky Clicky </h3>\n    </a>\n    <h5 className=\"ml-auto mt-2\" id=\"counters\">\n      Score: {props.score} | Top score: {props.top}{\" \"}\n    </h5>\n  </nav>\n);\n\nexport default Navbar;\n","import React from \"react\";\n\nconst Header = props => (\n  <div className=\"container text-center\" id=\"header-container\">\n    <h1 id=\"logo\">\n      <b>Drunky Clicky </b>\n    </h1>\n    <br />\n    <h5 className=\"subtitle\">How to play:</h5>\n    <br />\n    <h5 className=\"subtitle\">\n      The images below will shuffle after each click. <br /> The goal is to\n      select each image only once - while Sober! Click on an image to get\n      started! Good luck!\n    </h5>\n  </div>\n);\n\nexport default Header;\n","import React from \"react\";\n\nconst Card = props => (\n  <div className=\"col-md-3\">\n    <div className=\"card mb-5 imageContainer\">\n      <img\n        className=\"card-img-top drunkImg\"\n        src={props.src}\n        alt={props.alt}\n        onClick={props.handleClick}\n        id={props.id}\n      />\n    </div>\n  </div>\n);\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport Card from \"./Card\";\nimport Pics from \"./../pics.json\";\nimport shuffle from \"shuffle-array\";\n\nclass CardContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    // setting the state: score is at 1, pics is pulling in the pic json, and we have no selected pics yet\n    this.state = {\n      score: 1,\n      pics: Pics,\n      selectedPics: []\n    };\n  }\n\n  // when the user clicks on a pic card\n  handleClick = e => {\n    // grab the selected pic's id\n    let id = e.target.id;\n\n    // init variable that sees if the user selects a pic that's already in selectedpics\n    let exists = false;\n\n    // loop through selected pics and see if any ids match selected id\n    this.state.selectedPics.forEach(pic => {\n      // if id matches\n      if (pic.id === id) {\n        // change exists to true\n        exists = true;\n      }\n    });\n\n    // if exists is true\n    if (exists) {\n      // end the game\n      this.endGame();\n    }\n\n    // otherwise\n    else {\n      // loop through the pic json\n      this.state.pics.forEach(pic => {\n        // if the pic id matches the selected id\n        if (pic.id === id) {\n          // add the pic to the selected pic array\n          this.setState({ selectedPics: [...this.state.selectedPics, pic] });\n          console.log(this.state.selectedPics);\n\n          // update the score\n          this.updateScore();\n        }\n      });\n    }\n\n    // SHUFFLE THE PICS\n    this.setState({ pics: shuffle(this.state.pics) });\n    console.log(\"Shuffling Pusheens\");\n  };\n\n  // function to update the current game's score\n  updateScore = () => {\n    // set the new score\n    this.setState({ score: this.state.score + 1 });\n    // update the parent component's display\n    this.props.updateCurrentScore(this.state.score);\n    console.log(\"Score: \" + this.state.score);\n  };\n\n  // function to end the game\n  endGame = () => {\n    console.log(\"End!\");\n    // push the current game score as the new top score\n    this.props.updateTopScore(this.state.score);\n    // set the score back to 1 and the selected array to empty\n    this.setState({ score: 1, selectedPics: [] });\n    // update the current score to 0\n    this.props.updateCurrentScore(0);\n  };\n\n  render() {\n    return (\n      <div className=\"container\" id=\"card-container\">\n        <div className=\"row\">\n          {Pics.map(pic => (\n            <Card\n              src={pic.photo}\n              key={pic.id}\n              id={pic.id}\n              alt={pic.name}\n              endGame={this.endGame}\n              handleClick={this.handleClick}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CardContainer;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport CardContainer from \"./components/CardContainer\";\n\nclass App extends Component {\n  // setting the state\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n      topScore: 0\n    };\n  }\n\n  // update the current score count in the nav\n  updateCurrentScore = newCount => {\n    // set the new count as the count\n    this.setState({ count: newCount });\n  };\n\n  // update the top score in the nav\n  updateTopScore = newTop => {\n    // if the new top score is higher than the current\n    if (newTop > this.state.topScore) {\n      // then set the state but you have to subtract 1\n      this.setState({ topScore: newTop - 1 });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar score={this.state.count} top={this.state.topScore} />\n        <Header />\n        <CardContainer\n          updateCurrentScore={this.updateCurrentScore}\n          updateTopScore={this.updateTopScore}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}